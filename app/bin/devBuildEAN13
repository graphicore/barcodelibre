#!/usr/bin/env bash
# execute like this:
#   $ ./app/bin/buildAll


cd `dirname $BASH_SOURCE`/../../;
SOURCE_DIR=`pwd`/sources
FONTS_DIR=`pwd`/fonts

rm -rf $SOURCE_DIR $FONTS_DIR autohinted master_ttf

mkdir -p $SOURCE_DIR
mkdir -p $FONTS_DIR

TEXT_BELOW_FONT="./app/assets/Inconsolata-Regular.ttf"
BUILD="./app/bin/build"
ADD_DSIG="./app/bin/add-dsig.py"

FAMILY_BASE_NAME="Libre Barcode"
FILE_BASENAME="LibreBarcode"

# if we specify "unit" in here, we can make this fit to the UPM
UNITS_PER_EM=1024
ASC_MODULES=70
DESC_MODULES=10
HEIGHT_MODULES=$(expr $ASC_MODULES + $DESC_MODULES)
# IMPORTANT! Scales the UNIT so the modules are bigger than the UPM
# That way the font appears bigger than the size used in the application
# which I think may be necessary in some cases, when the UI limits how much
# a font can be scaled. However, it also is prone to break (wrong?)
# assumptions made by appdevelopers.
BLOW_UP_FACTOR=1
MODULE_UNIT=$(expr $BLOW_UP_FACTOR \* $UNITS_PER_EM / $HEIGHT_MODULES) # floor( 3 * 1024 / 80 ) = 38

ASCENDER=$(expr $ASC_MODULES \* $MODULE_UNIT) # 70 (~ parameters.top)
DESCENDER=-$(expr $DESC_MODULES \* $MODULE_UNIT)
STYLE_NAME="Regular"
STYLEMAP_STYLE_NAME="regular"
X_HEIGHT=$(expr $ASCENDER / 2)
CAP_HEIGHT=${ASCENDER}
VENDOR_ID="GRCR"
LICENSE='This Font Software is licensed under the SIL Open Font '\
'License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL'
LICENSE_URL='https://scripts.sil.org/OFL'
COPYRIGHT="Copyright 2017-2019 The $FAMILY_BASE_NAME Project Authors (https://github.com/graphicore/librebarcode)"
VERSION="Version 1.005"
VERSION_MAJOR=1
VERSION_MINOR=4

FONTINFO_EAN13TEXT=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} EAN13 Text"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} EAN13 Text"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "styleName": "${STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

# Spec 5.2.3.2 Symbol height"
#     auxiliaryDrop: 5x (units)
#     top: depends!
#         EAN-13, UPC-A, UPC-E: 22.85 mm (/ 0.330 = 69.24242424242425 units)
#         EAN-8: 18.23 mm (/ 0.330 = 55.24242424242424)
# CAUTION: "Symbol height is not modular."
#          Hence, this must not be changed according to the spec...
PARAMETERS_EAN13TEXT=$(cat <<EOT
{
    "unit": ${MODULE_UNIT}
  , "top": 69.24
  , "topEAN8": 55.24
  , "fontBelowPadding": 1
  , "adjustFontUPCQuietZone": 1.25
  , "auxiliaryDrop": 5
}
EOT
)

TARGETS=(EAN13TEXT)
              # UFO_BASE CODE_TYPE USEFONT
TARGET_EAN13TEXT=("EAN13Text" "EAN13" 1)

for TARGET in ${TARGETS[@]}; do
    _FONTINFO_DATA_REFERENCE="FONTINFO_$TARGET"[@]
    FONTINFO=( "${!_FONTINFO_DATA_REFERENCE}" )

    _PARAMETERS_DATA_REFERENCE="PARAMETERS_$TARGET"[@]
    PARAMETERS=( "${!_PARAMETERS_DATA_REFERENCE}")
    if [ "${#PARAMETERS[@]}" -eq 0 ];then
        PARAMETERS='{}'
    fi

    _TARGET_DATA_REFERENCE="TARGET_$TARGET"[@]
    TARGET_DATA=( "${!_TARGET_DATA_REFERENCE}" ) # copies the list
    UFO_BASE=${TARGET_DATA[0]}
    UFO_DIR="$SOURCE_DIR/$FILE_BASENAME${UFO_BASE}-Regular.ufo"
    CODE_TYPE=${TARGET_DATA[1]}
    USEFONT=${TARGET_DATA[2]}
    FONTARG=""
    if [ $USEFONT -eq 1 ];then
        FONTARG=" --fontbelow $TEXT_BELOW_FONT "
    fi

    $BUILD $CODE_TYPE $UFO_DIR --force --fontinfo "$FONTINFO" --parameters "$PARAMETERS" $FONTARG
    fontmake -u $UFO_DIR --keep-overlaps --keep-direction -a"--symbol" -o ttf

done

cp autohinted/master_ttf/* fonts && \
cp OFL.txt fonts && \
rm -rf master_ttf autohinted
ls fonts

FILES=$(find fonts -type f -name "*.ttf")
python $ADD_DSIG $FILES;
gftools fix-hinting fonts/LibreBarcodeEAN13Text-Regular.ttf
mv fonts/LibreBarcodeEAN13Text-Regular.ttf.fix fonts/LibreBarcodeEAN13Text-Regular.ttf
